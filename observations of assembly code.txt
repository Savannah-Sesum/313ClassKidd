---Observations of addmatsSimple.c vs addmatsSimple.s---

Immediately, I see that the .c is nearly a 1/3 shorter than the .s
I also note that at the top, .c only defines global variables ARRAY_SIZE and DEFAULT_RETURN_VALUE while the .s defines the file this is being written to, the scale and i believe the type of windows (32). the .c does not require any definition of a scale nor the type of windows.
It should also be said that almost every line of code in the .c ends with a ; while that is not necessary in the .s
in the .c, there is no reference to the numbers 60, 40 and 20. .s however, utilizes those numbers and I suppose that they have something to do with direct memory allocation into a %esp, which I think is some sort of way of abstractly creating an array.
At the very end of each file, the .s nearly has the same exact lines of code that are shown at the top of the file. .c does not have that.
.s also uniquely calls forth the compiler, something .c does not do at all.

In short, a general conclusion is that you need to define functions such as L2 and L3 in .s while none of that is necessary in .c since these functions have been condensed into a single line of code. 

---Observations of addmatsSubr.c vs addmatsSubr.s---

So what I see that is a similarity in both files is that they both have a function called addMatracies. Unlike in .s, the .c file doesn't have to call this function as a .globl nor does it need to do .def
The .s introduces negative numbers such as -8 and -16. The .c does not contain a single reference to a negative number. I believe this is because the .s is merely subtracting memory since we have access memory due to adding 2 variables together.
I also think that these are the first instances of %xmm0 and etc being used in the .s, where as the .c uses pointers for the first time.

---Observations of addmats.cpp vs addmats.s---

So, immediately I noticed that there are more complexed names being called in the assembly. I'm not sure what the _Zn15... could mean, but it seems that we're linking a section from an outside source to then be used in the assembly. This type of extrapolation is not seen in the .cpp file
In the .s file, there's a new section in the main: which is .LFB4. I have a feeling that this is the representation of the class MatrixFunctions in the .cpp because it calls the _ZN15 within that section, which are possibly objects acquired from the linking done earlier at the top. This would probably relate to the .LFB3 and .LFB2 seen at the top.
I have just realized that comments and headers do not exist in .s files.
I don't think there's any type of encapsulation in .s too because nothing seems to be accessed privately, and I think in general there's just no such thing as privacy - everything's public in assembly files




